/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// scaling operator:
convertToMeters .0001;
// Geometry parameters 

h     259;   //                                 // Height of ripple in units of [m*10000]
l     1724;   //                                // Length of ripple in units of [m*10000]

k #calc "6.2832*1000000/$l";        // Ripple wave number 

// vertice coordinates:
xmin 0;
xmax $l;
ymin1 #calc "0.5*$h";
ymin #calc " $h*2"; 
ymax #calc "2.5*$l";
zmin 0;
zmax 1;

// cell numbers:
xcells 100;
ycells  60;
ycells1 100;    // bottom hexgon
zcells 1;

// generating vertices:
vertices
(
    ($xmin $ymin $zmin)		//0 d1
    ($xmax $ymin $zmin)		//1 d2
    ($xmax $ymax $zmin)		//2
    ($xmin $ymax $zmin)		//3
    ($xmin $ymin $zmax)		//4 c1
    ($xmax $ymin $zmax)		//5 c2
    ($xmax $ymax $zmax)		//6
    ($xmin $ymax $zmax)		//7
    ($xmin $ymin1 $zmax)        //8  a1
    ($xmin $ymin1 $zmin)        //9  b1
    ($xmax $ymin1 $zmin)        //10 b2
    ($xmax $ymin1 $zmax)        //11 a2
     


);

// generating blocks:
blocks
(
    hex (0 1  2 3 4 5  6 7) ($xcells $ycells $zcells) simpleGrading (1 3 1)  //450
    hex (9 10 1 0 8 11 5 4) ($xcells $ycells1 $zcells) simpleGrading (1 150 1)  //450 
);

edges
(

 BSpline 9 10 ( #codeStream
 {
   codeInclude
   #{
      #include "pointField.H"
   #};

   code
   #{
      label nbPoints = $l;


     for (label i = 0; i < nbPoints; i++)
     {
       scalar xi = i - 0.5*$h*std::sin(i*$k*0.000001);
       scalar yi = 0.5*$h*std::cos(i*$k*0.000001);
       os  << point(xi, yi, 0) << endl;
       Info  << point(xi, yi, 0) << endl;
     }
   #};
  }
   )

    BSpline 8 11 ( #codeStream
 {
   codeInclude
   #{
      #include "pointField.H"
   #};

   code
   #{
     label nbPoints = $l;
     for (label i = 0; i < nbPoints; i++)
     {
       scalar xi = i - 0.5*$h*std::sin(i*$k*0.000001);
       scalar yi = 0.5*$h*std::cos(i*$k*0.000001);
       os  << point(xi, yi, 1) << endl;
       Info  << point(xi, yi, 1) << endl;
     }
   #};
  }
   )

);

boundary
(
    freeStream
    {
        type symmetry;
        faces
        (
            (3 7 6 2)
        );
    }
    bottomWall
    {
        type wall;
        faces
        (
            (10 11 8 9)
        );
    }
    left
    {
        type cyclic;
        neighbourPatch right;
        faces
        (
          (0 4 7 3)
          (9 8 4 0)
        );
    }
    right
    {
        type cyclic;
        neighbourPatch left;
        faces
        (
          (2 6 5 1)
          (1 5 11 10)
        );
    }
    front
    {
        type empty;
        faces
        (
          (4 5 6 7)
          (8 11 5 4) 
        );
    }
    back
    {
        type empty;
        faces
        (
          (0 3 2 1)
          (9 0 1 10)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
